log10(x)     := log(x) / log(10)$
logn(x, n)   := log(x) / log(n)$
rad2deg(rad) := rad * (180 / %pi)$
deg2rad(deg) := deg * (%pi / 180)$
circ(r)      := %pi * r^2;

trapezoidal(f, t, bottom, top, n) := block(
	[f: f, t: t, bottom: bottom, top: top, n: n, dt],
	/* delta */
	dt: (top - bottom) / n,
	/* make f and t into f(t) (we use g(t) because f is taken) */
	define(g(t), f),
	/* function for getting the i-th slice */
	x(i) := block([i: i], bottom + i * dt),
	/* sum 1/2 t * sum of all f(x(u)) from u = 0 to u = n
	 * that didn't really clear things up.
	 * google it if that confuses you */
	ratsimp((dt/2)*(g(x(0)) + 2 * sum(g(x(i)), i, 1, n - 1) + g(x(n))))
)$

midpoint(f, t, bottom, top, n) := block(
	[f: f, t: t, bottom: bottom, top: top, n: n, dt],
	dt: (top - bottom) / n,
	define(g(t), f),
	x(i) := block([i: i], bottom + ((2 * i - 1) / 2) * dt),
	ratsimp(dt * sum(g(x(i)), i, 1, n))
)$

leftendpoint(f, t, bottom, top, n) := block(
	[f: f, t: t, bottom: bottom, top: top, n: n, dt],
	dt: (top - bottom) / n,
	define(g(t), f),
	x(i) := block([i: i], bottom + i * dt),
	ratsimp(dt * sum(g(x(i)), i, 0, n - 1))
)$

rightendpoint(f, t, bottom, top, n) := block(
	[f: f, t: t, bottom: bottom, top: top, n: n, dt],
	dt: (top - bottom) / n,
	define(g(t), f),
	x(i) := block([i: i], bottom + i * dt),
	ratsimp(dt * sum(g(x(i)), i, 1, n))
)$

quad(a, b, c) := block(
	discrim: sqrt(b^2 - 4 * a * c),
	[a: a, b: b, c: c],
	if (equal(a, 0)) then
		error("ERROR: x^2 coefficient cannot be equal to 0!"),
	discrim: sqrt(b^2 - 4 * a * c),
	bottom: 2 * a,
	[(-b + discrim) / bottom,
	 (-b - discrim) / bottom]
)$

load(antid)$

/* Given these variables:
 *
 *     a: 2*b$ b: 7*d+c+2$ c: d+2$ d: 31*%e$
 *
 * What's the symbolic representation of a? try "a, expand;".  You'll get
 * 14d + 2c + 4. Evaluate it again and you'll get 2d + 434e + 8 -- oh no! One
 * of the variables has been substituted for its numeric value, and it's no
 * longer a value-independent *generic* equation.  You'll have to evaluate that
 * another 3 times to get the decimal approximation (1356.268...), and you'll
 * never get a generic equation for a in terms of the other variables.
 *
 * However, symb(a) immediately returns 16*d + 8 by recursively substituting
 * any non-numeric variables until the expression stops changing
 *
 * numeric() returns a numeric representation which may include constants like
 * e or pi, radicals, and fractions. numeric(a) is 496e + 8.
 *
 * dec() returns a plain decimal representation. dec(a) is 1356.268... */

numeric(expr) := ev(expr, infeval, expand)$

dec(expr) := ev(expr, infeval, numer)$

sci(expr) := block(
	[deci, exponent],
	deci: dec(expr),
	exponent: floor(log10(dec(expr))),
	printf(false, "~f * 10^~d", deci/10^exponent, exponent)
)$

symb(expr, [talk]) := block(
	[prev, var, i, simpler, thevars, subst_limit],
	/* if true or "debug" is the second arg, print extra output */
	speak: if length(talk) >= 1 then
		if talk[1] = true or talk[1] = "debug" then
			true
		else
			false,
	prev: und, /* undefined */
	subst_limit: 100,
	expr,
	/* while substituting variables changes the expression
	 * (and we've done less than subst_limit rounds of substitutions)
	 * substitute vars for values */
	for i: 0 while prev # expr and i <= subst_limit do block(
		i: i + 1,
		/* get list of variables in expression */
		thevars: listofvars(expr),
		if speak then
			printf(true, "~&loop, expr is ~a, vars are ~a",
			expr, thevars),
		/* roll values */
		prev: expr,
		for var in thevars do block(
			/* get value of variable */
			simpler: ev(var),
			if speak then
				printf(true,
				"~&    ~a is ~a~&    ~a is scalar? ~a",
				var, simpler, var, scalarp(simpler)),
			/* substitute the var as long as it's
			 * NOT a defined constant */
			if not scalarp(simpler) then
				expr: subst(simpler, var, expr)
		)
	),
	expr
)$

%G: 6.67408e-11$
declare(%G, constant)$
%K: 8.9875517873681764e9$ /* N m^2/C^2 = m/F */
declare(%K, constant)$
%E_0: 8.854187817e-12$ /* vacuum permutivity */
declare(%E_0, constant)$
e: 1.6021766208e-19$ /* coulombs, fundamental charge val. */
declare(e, constant)$
e_mass: 9.10938356e-31$ /* kg */
declare(e_mass, constant)$

exa(n)   := n * 1e18  $
peta(n)  := n * 1e15  $
tera(n)  := n * 1e12  $
giga(n)  := n * 1e9   $
mega(n)  := n * 1e6   $
kilo(n)  := n * 1e3   $
hecto(n) := n * 1e2   $
deca(n)  := n * 1e1   $
deci(n)  := n * 1e-1  $
centi(n) := n * 1e-2  $
milli(n) := n * 1e-3  $
micro(n) := n * 1e-6  $
nano(n)  := n * 1e-9  $
pico(n)  := n * 1e-12 $
femto(n) := n * 1e-15 $
atto(n)  := n * 1e-18 $
