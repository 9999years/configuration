#! /usr/bin/env bash
set -e

# {{{ Colors, logging functions
readonly PROG_NAME="$0"

function RESET            { echo -e "\e[0m";  }
function BOLD             { echo -e "\e[1m";  }
function RESET_BOLD       { echo -e "\e[21m"; }
function DIM              { echo -e "\e[2m";  }
function RESET_DIM        { echo -e "\e[22m"; }
function UNDERLINED       { echo -e "\e[4m";  }
function RESET_UNDERLINED { echo -e "\e[24m"; }
function BRRED            { echo -e "\e[31m"; }
function RED              { echo -e "\e[91m"; }
function BRGREEN          { echo -e "\e[32m"; }
function GREEN            { echo -e "\e[92m"; }
function BRYELLOW         { echo -e "\e[33m"; }
function YELLOW           { echo -e "\e[93m"; }
function BRBLUE           { echo -e "\e[34m"; }
function BLUE             { echo -e "\e[94m"; }
function BRPURPLE         { echo -e "\e[35m"; }
function PURPLE           { echo -e "\e[95m"; }
function BRCYAN           { echo -e "\e[36m"; }
function CYAN             { echo -e "\e[96m"; }
function BRGRAY           { echo -e "\e[37m"; }
function GRAY             { echo -e "\e[97m"; }
function RESET_FG         { echo -e "\e[39m"; }

function now { date +%FT%T; }

# _log COLORS LABEL [MESSAGE [...]]
function _log {
    color="$1"
    shift
    level="$1"
    shift
    echo -n "$color$level $PROG_NAME ${color}[$(now)]:" "$@"
    RESET
}
# }}}

function dbg   { _log "$(GRAY)"         "[debug]" "$@"; }
function info  { _log "$(BRGREEN)"      "[info] " "$@"; }
function warn  { _log "$(BRYELLOW)"     "[warn] " "$@"; }
function error { _log "$(BRRED)"        "[error]" "$@"; }
function fatal { _log "$(BOLD)$(BRRED)" "[FATAL]" "$@"; exit 1; }
function cmd   { _log "$(CYAN)"         "[run]  " "\$ $(BOLD)$(UNDERLINED)$*"; }

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Get filename
info "Enter the location of the new Mathematica_*_LINUX.sh script,"
info "Or press <ENTER> to select from ~/Downloads"
echo -n "$(BRGREEN)> "
read -r scriptPath
echo -n "$(RESET)"
if [[ -z "$scriptPath" ]]; then
    scriptPath="$(find ~/Downloads -type f -name 'Mathematica_*.sh' -print0 | fzf --read0)"
    # Up 1 line, clear line
    echo -e "\e[1A\e[2K$(BRGREEN)> $scriptPath$(RESET)"
fi
scriptBasename="$(basename "$scriptPath")"

# Get version
version="$(echo "$scriptBasename" | grep --only-matching -E '[0-9]+(\.[0-9]+)*')"
if [[ -z "$version" ]]; then
    fatal "Couldn't determine version from basename $(UNDERLINED)$scriptBasename"
fi

# Copy to Nix store
info "Copying $scriptPath to Nix store"

cmd "nix-store --add-fixed sha256 \"$scriptPath\""
storePath="$(nix-store --add-fixed sha256 "$scriptPath")"
if [[ -z "$storePath" ]]; then
    fatal "Couldn't add file to Nix store"
fi
info "Store path: $(UNDERLINED)$storePath"

# Get hash
info "Getting hash of added file with $(UNDERLINED)nix show-derivation $storePath"
nixHash="$(nix show-derivation "$storePath" \
    | jq -r '.[] | .outputs.out.hash' \
    | xargs nix-hash --to-base32 --type sha256)"
if [[ -z "$nixHash" ]]; then
    # Backup: hash manually
    warn "Couldn't get hash of added file; hashing manually"
    cmd "nix-hash --base32 --type sha256 --flat $storePath"
    nixHash="$(nix-hash --base32 --type sha256 --flat "$storePath")"
    if [[ -z "$nixHash" ]]; then
        fatal "Couldn't determine hash of added file"
    fi
fi
info "File hash: $nixHash"

# Save old expression
newExpr="$SCRIPT_DIR/default.nix"
oldExpr="$(mktemp -d)/old-default.nix"
info "Backing old Nix expression up to $(UNDERLINED)$oldExpr"
cp "$newExpr" "$oldExpr"
info "Writing Nix expression to $(UNDERLINED)$newExpr"

# Write new expression
cat <<EOF > "$newExpr"
# This file is automatically generated by './update.sh'.
# Do not manually edit it!
self: super: {
  mathematica = super.mathematica.overrideAttrs (old: rec {
    version = "$version";
    name = "mathematica-\${version}";

    src = super.requireFile rec {
      name = "Mathematica_\${version}_LINUX.sh";
      sha256 = "$nixHash";
      url = "https://user.wolfram.com/portal/myProducts.html";
    };
  });
}
EOF

# Display diff
info "Finished! Diff:"
if command -v delta > /dev/null; then
    cmd "diff --unified --report-identical-files \"$oldExpr\" \"$newExpr\" | delta"
    diff --unified --report-identical-files "$oldExpr" "$newExpr" | delta
else
    cmd "diff --report-identical-files \"$oldExpr\" \"$newExpr\""
    diff --report-identical-files "$oldExpr" "$newExpr"
fi
