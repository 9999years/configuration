global !p
import re
import subprocess
import functools
import urllib

PLACEHOLDER_HASH = '1111111111111111111111111111111111111111111111111111'

_GH_USER_PARTIAL_RE = re.compile(r'[a-zA-Z0-9-]+')
_GH_REPO_PARTIAL_RE = re.compile(r'[a-zA-Z0-9.-]+')
_BAD_FILENAME_RE = re.compile(r'[^a-zA-Z0-9._-]')
# omitted: e o u t
NIX_BASE32_RE = re.compile(r'[0123456789abcdfghijklmnpqrsvwxyz]{52}')


def sanitize_filename(name):
	return _BAD_FILENAME_RE.sub('_', name) if name else 'file'


def last_component(url):
	split = urllib.parse.urlsplit(url)
	return split.path.rpartition('/')[2]


def last_component_sanitized(url):
	return sanitize_filename(last_component(url))


def is_valid_github_username(user):
	return not (
		(not user or len(user) >= 40)
		or '--' in user
		or (user.startswith('-') or user.endswith('-'))
		or (not _GH_USER_PARTIAL_RE.fullmatch(user))
	)


def is_valid_github_repo(name):
	return _GH_REPO_PARTIAL_RE.fullmatch(name)


def is_reasonable_version(version):
	return bool(version)


def nix_prefetch_url(url, opts=None):
	args = ['nix-prefetch-url']
	if opts:
		args.extend(opts)
	args.append(url)
	try:
		proc = subprocess.run(
			args,
			stdout=subprocess.PIPE,
			stderr=subprocess.DEVNULL,
		)
	except:
		# Keyboard interrupt, whatever, don't complain
		return PLACEHOLDER_HASH

	if proc.returncode != 0:
		# Download failed, return placeholder hash
		return PLACEHOLDER_HASH

	try:
		nix_hash = proc.stdout.decode('utf-8').strip()
	except UnicodeDecodeError:
		# Unexpected, return placeholder
		return PLACEHOLDER_HASH

	if NIX_BASE32_RE.fullmatch(nix_hash):
		return nix_hash
	else:
		# Incorrectly formatted (?) hash
		return PLACEHOLDER_HASH


@functools.lru_cache()
def plain_nix_hash(url):
	return nix_prefetch_url(url, opts=['--name', last_component_sanitized(url)])


@functools.lru_cache()
def github_nix_hash(owner, repo, version):
	return nix_prefetch_url(
		f'https://github.com/{owner}/{repo}/archive/{version}.tar.gz',
		opts=[
			'--unpack',
			# if the version number isn't a valid nix path name, the download might error
			'--name', sanitize_filename(f'{owner}-{repo}-{version}'),
		]
	)
endglobal

snippet _skel "skeleton" b
{ pkgs ? import <nixpkgs> { } }:
let inherit (pkgs) stdenv lib;
in stdenv.mkDerivation {
	pname = "pname";
	version = "0.0.1";
	src = ./.;
	buildInputs = [ ];
}
endsnippet

snippet github "fetchFromGitHub" i
fetchFromGitHub {
	owner = "$1";
	repo = "$2";
	rev = "$3";
	sha256 = "${4:`!p
cur = snip.c
if not cur:
	snip.rv = PLACEHOLDER_HASH
elif cur != PLACEHOLDER_HASH:
	snip.rv = cur
elif (
	snip.p.current_text == cur
	and is_valid_github_username(t[1])
	and is_valid_github_repo(t[2])
	and is_reasonable_version(t[3])
):
	snip.rv = github_nix_hash(t[1], t[2], t[3])
else:
	snip.rv = PLACEHOLDER_HASH
`}";
}
endsnippet

snippet fetchurl "fetchurl" i
fetchurl {
	url = "$1";
	sha256 = "${4:`!p
cur = snip.c
if cur and cur != PLACEHOLDER_HASH:
	snip.rv = cur
elif (
	cur
	and snip.p.current_text == cur
	and '://' in t[1]
):
	snip.rv = plain_nix_hash(t[1])
else:
	snip.rv = PLACEHOLDER_HASH
`}";
}
endsnippet

snippet drv "stdenv.mkDerivation" i
stdenv.mkDerivation {
	pname = "$1";
	version = "${2:0.0.0}";
	src = ${3:./.};
	buildInputs = [ $4 ];
}
endsnippet

snippet meta "meta attribute" b
meta = with stdenv.lib; { # https://nixos.org/manual/nixpkgs/stable/#chap-meta
	description = "${1:One-line description}";
	longDescription = ''
		${2:Longer description.}
	'';
	homepage = "${3:URL}";
	license = ${4:licenses.gpl3Plus};
	platforms = ${4:platforms.all};
};
endsnippet

snippet skel "callPackage skeleton" b
{ pkgs ? import <nixpkgs> { } }:
pkgs.callPackage ./build.nix { }
endsnippet

snippet sh "shell script"
writeShellScript "${1:filename.sh}" ''
	$0
''
endsnippet

snippet opt "NixOS option"
mkOption {
	type = ${1:types.nullOr types.str};
	default = null;
	description = ''
		$0
	'';
}
endsnippet

snippet module "NixOS Module" b
{ config, pkgs, lib, ... }:
let
	inherit (lib) recursiveUpdate types mkEnableOption mkOption mkIf;

	cfg = config.${1:moduleName};

in {
	options.$1 = {
		enable = mkEnableOption "";
	};

	config = mkIf cfg.enable {
		# TODO
	};
}
endsnippet
